syntax = "proto3";

package dash.route;

import "types.proto";
import "route_type.proto";

message VnetDirect {
    // destination vnet name if routing_type is {vnet, vnet_direct}, a vnet other than eni's vnet means vnet peering
    string vnet = 1;
    // overly_ip to lookup if routing_type is {vnet_direct}, use dst ip from packet if not specified
    optional types.IpAddress overlay_ip = 2;
}

message ServiceTunnel {
    // overlay ipv6 src ip if routing_type is {servicetunnel}
    types.IpAddress overlay_sip = 1 [deprecated = true]; // replaced by overlay_sip_prefix
    // overlay ipv6 dst ip if routing_type is {servicetunnel}
    types.IpAddress overlay_dip = 2 [deprecated = true]; // replaced by overlay_dip_prefix
    // underlay ipv4 src ip if routing_type is {servicetunnel}, this is the ST GW VIP (for ST traffic) or custom VIP
    types.IpAddress underlay_sip = 3;
    // underlay ipv4 dst ip to override if routing_type is {servicetunnel}, use dst ip from packet if not specified
    types.IpAddress underlay_dip = 4;
    types.IpAddress overlay_sip_prefix = 5;
    types.IpAddress overlay_dip_prefix = 6;
}

message Route {
    route_type.RoutingType action_type = 1 [deprecated = true]; // renamed as routing_type
    oneof RoutingTypeData {
        // destination vnet name if routing_type is vnet,, a vnet other than eni's vnet means vnet peering
        string vnet = 2;
        // destination vnet name if routing_type is vnet_direct,, a vnet other than eni's vnet means vnet peering
        route.VnetDirect vnet_direct = 3;
        // appliance id if routing_type is {appliance} 
        string appliance = 4;
        // service tunnel if routing_type is {service_tunnel}
        route.ServiceTunnel service_tunnel = 5;
    }
    // Metering policy lookup enable (optional), default = false
    optional bool metering_policy_en = 6 [deprecated = true];
    // Metering class-id, used if metering policy lookup is not enabled
    optional uint64 metering_class = 7 [deprecated = true];
    optional uint32 metering_class_or = 8;
    optional uint32 metering_class_and = 9;
    route_type.RoutingType routing_type = 10; // Must be one of {vnet, vnet_direct, direct, servicetunnel, drop}
    // If VnetMapping for an IP in this prefix has routing_type {privatelink}, overrides pl_underlay_sip from ENI table if given
    types.IpAddress underlay_sip = 11;
    optional string tunnel = 12;
}

// ENI route table with CA prefix for packet Outbound
message RouteKey {
    string eni = 1 [deprecated = true]; // renamed as group_id 
    // IP prefix string with prefix length. E.G. 10.1.0.0/16
    string prefix = 2;
    string group_id = 3;
}
