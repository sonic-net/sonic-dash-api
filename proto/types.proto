syntax = "proto3";

package dash.types;

message IpAddress {
  oneof ip {
    fixed32 ipv4 = 1; // Network byte order (big-endian)
    bytes ipv6 = 2; // Network byte order (big-endian)
  }
}

message IpPrefix {
  IpAddress ip = 1;
  IpAddress mask = 2;
}

message Range {
  uint32 min = 1;
  uint32 max = 2;
}

message ValueOrRange {
oneof value_or_range {
  uint32 value = 1;
  Range range = 2;
}
}

enum IpVersion {
  IP_VERSION_UNSPECIFIED = 0;
  IP_VERSION_IPV4 = 1;
  IP_VERSION_IPV6 = 2;
}

message Guid {
  // 128 bits (16 bytes)
  bytes value = 1;
}

enum HaRole{
  HA_ROLE_UNSPECIFIED = 0;
  HA_ROLE_DEAD = 1;
  HA_ROLE_ACTIVE = 2;
  HA_ROLE_STANDBY = 3;
  HA_ROLE_STANDALONE = 4;
  HA_ROLE_SWITCHING_TO_ACTIVE = 5;
}

enum HaOwner{
  HA_OWNER_UNSPECIFIED = 0;
  HA_OWNER_DPU = 1;
  HA_OWNER_SWITCH = 2;
}

enum HaScope{
  HA_SCOPE_UNSPECIFIED = 0;
  HA_SCOPE_DPU = 1;
  HA_SCOPE_ENI = 2;
}

enum HaState{
  HA_STATE_UNSPECIFIED = 0;
  HA_STATE_DEAD = 1;
  HA_STATE_CONNECTING = 2;
  HA_STATE_CONNECTED = 3;
  HA_STATE_INITIALIZING_TO_ACTIVE = 4;
  HA_STATE_INITIALIZING_TO_STANDBY = 5;
  HA_STATE_PENDING_STANDALONE_ACTIVATION = 6;
  HA_STATE_PENDING_ACTIVE_ACTIVATION = 7;
  HA_STATE_PENDING_STANDBY_ACTIVATION = 8;
  HA_STATE_STANDALONE = 9;
  HA_STATE_ACTIVE = 10;
  HA_STATE_STANDBY = 11;
  HA_STATE_DESTROYING = 12;
  HA_STATE_SWITCHING_TO_STANDALONE = 13;
}

enum HaSetDpChannelState {
  HA_SET_EVENT_DP_CHANNEL_UNSPECIFIED = 0;
  HA_SET_EVENT_DP_CHANNEL_UP = 1;
  HA_SET_EVENT_DP_CHANNEL_DOWN = 2;
}
